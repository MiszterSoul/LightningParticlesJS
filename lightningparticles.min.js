class LightningParticle{constructor(i,t={}){this.canvas=i,this.ctx=i.getContext("2d"),this.config={particleCount:t.particleCount??350,particleColor:t.pparticleColor??"#4a4a4a",particleOpacity:t.particleOpacity??.8,particleMinSize:t.particleMinSize??.5,particleMaxSize:t.particleMaxSize??2,particleSpeed:t.particleSpeed??1,particleBlendMode:t.particleBlendMode??"source-over",minParticleCount:t.minParticleCount??25,maxParticleCount:t.maxParticleCount??1500,particleAdjustStep:t.particleAdjustStep??15,lineColor:t.lineColor??"#ffffff",lineOpacity:t.lineOpacity??.6,lineThickness:t.lineThickness??.5,maxDistance:t.maxDistance??50,lightningColor:t.lightningColor??"#00ffff",lightningGlowColor:t.lightningGlowColor??"#00ffff",lightningOpacity:t.lightningOpacity??.8,lightningThickness:t.lightningThickness??2,lightningFrequency:t.lightningFrequency??.03,lightningGlow:t.lightningGlow??100,globalLightningDirection:t.globalLightningDirection??!1,lightningAngle:t.lightningAngle??Math.PI/2,lightningThroughParticles:t.lightningThroughParticles??!0,minLightningSegments:t.minLightningSegments??3,maxLightningSegments:t.maxLightningSegments??20,enableSplits:t.enableSplits??!0,minSplitSegments:t.minSplitSegments??3,maxSplits:t.maxSplits??3,splitProbability:t.splitProbability??.3,minLightningLifetime:t.minLightningLifetime??30,maxLightningLifetime:t.maxLightningLifetime??60,instantLightning:t.instantLightning??!1,lightningBlendMode:t.lightningBlendMode??"source-over",enableLightningOnCollision:t.enableLightningOnCollision??!1,collisionLightningColor:t.collisionLightningColor??"#ff0000",collisionLightningGlowColor:t.collisionLightningGlowColor??"#ff0000",collisionLightningOpacity:t.collisionLightningOpacity??.9,collisionLightningThickness:t.collisionLightningThickness??3,collisionLightningLifetime:t.collisionLightningLifetime??50,collisionLightningDelay:t.collisionLightningDelay??1e3,collisionLightningMinDistance:t.collisionLightningMinDistance??15,collisionLightningIntensity:t.collisionLightningIntensity??50,collisionEnableSplits:t.collisionEnableSplits??!0,collisionSplitProbability:t.collisionSplitProbability??.3,collisionMinSplitSegments:t.collisionMinSplitSegments??3,collisionMaxSplits:t.collisionMaxSplits??3,backgroundColor:t.backgroundColor??"rgba(0, 0, 0, 0.75)",fpsLimit:t.fpsLimit??60,pauseOnBlur:t.pauseOnBlur??!0,referenceResolution:t.referenceResolution??{width:1920,height:1080},referenceParticleCount:t.referenceParticleCount??t.particleCount??350,minFPS:t.minFPS??5,maxFPS:t.maxFPS??144,pauseOnScroll:t.pauseOnScroll??!1,borderOffset:t.borderOffset??5},this.particles=[],this.lightning=[],this.lastTime=0,this.deltaTime=0,this.fpsInterval=1e3/this.config.fpsLimit,this.fps=0,this.frameCount=0,this.lastFpsUpdate=performance.now(),this.isRunning=!0,this.isPaused=!1,this.isScrollPaused=!1,this.resize=this.resize.bind(this),this.animate=this.animate.bind(this),this.handleVisibilityChange=this.handleVisibilityChange.bind(this),this.handleFocus=this.handleFocus.bind(this),this.handleBlur=this.handleBlur.bind(this),this.handleScroll=this.handleScroll.bind(this),this.avoidableAreas=[],this.lastCollisionLightningTime=0,this.collisionLightningPositions=[],this.setupEventListeners(),this.resize(),requestAnimationFrame(this.animate)}setupEventListeners(){window.addEventListener("resize",this.resize),document.addEventListener("visibilitychange",this.handleVisibilityChange),window.addEventListener("focus",this.handleFocus),window.addEventListener("blur",this.handleBlur),this.config.pauseOnScroll&&(this.observer=new IntersectionObserver((i=>{i.forEach((i=>{i.isIntersecting?(this.resume(),this.isScrollPaused=!1):(this.pause(),this.isScrollPaused=!0)}))}),{threshold:0}),this.observer.observe(this.canvas))}removeEventListeners(){window.removeEventListener("resize",this.resize),document.removeEventListener("visibilitychange",this.handleVisibilityChange),window.removeEventListener("focus",this.handleFocus),window.removeEventListener("blur",this.handleBlur),this.config.pauseOnScroll&&window.removeEventListener("scroll",this.handleScroll),this.config.pauseOnScroll&&this.observer&&(this.observer.disconnect(),this.observer=null)}resize(){try{this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight;const i=this.canvas.width*this.canvas.height,t=this.config.referenceResolution.width*this.config.referenceResolution.height,n=this.config.referenceParticleCount/t;let s=Math.round(n*i);for(s=Math.max(this.config.minParticleCount,Math.min(s,this.config.maxParticleCount)),this.config.particleCount=s,this.particles.forEach((i=>{i.x=Math.max(0,Math.min(i.x,this.canvas.width)),i.y=Math.max(0,Math.min(i.y,this.canvas.height))}));this.particles.length>this.config.particleCount;)this.particles.pop();for(;this.particles.length<this.config.particleCount;)this.createParticle()}catch(i){}}createParticle(){const i=Math.random()*(this.config.particleMaxSize-this.config.particleMinSize)+this.config.particleMinSize;this.particles.push({x:Math.random()*(this.canvas.width-2*i)+i,y:Math.random()*(this.canvas.height-2*i)+i,radius:i,color:this.config.particleColor,velocity:{x:(Math.random()-.5)*this.config.particleSpeed*2,y:(Math.random()-.5)*this.config.particleSpeed*2}})}updateParticles(){const{particleSpeed:i,borderOffset:t,enableLightningOnCollision:n,collisionLightningDelay:s,collisionLightningMinDistance:e,collisionLightningIntensity:l,pauseOnBlur:o}=this.config,h=this.deltaTime/(1e3/60),a=.9;this.particles.forEach((i=>{const n=i.x,s=i.y;i.x+=i.velocity.x*h,i.y+=i.velocity.y*h;const e=this.getCollidedAvoidableArea(i,n,s);if(e){const{area:t,side:n,collisionPoint:s}=e;switch("left"!==n&&"right"!==n||(i.velocity.x=-i.velocity.x*a),"top"!==n&&"bottom"!==n||(i.velocity.y=-i.velocity.y*a),n){case"left":i.x=t.x-i.radius;break;case"right":i.x=t.x+t.width+i.radius;break;case"top":i.y=t.y-i.radius;break;case"bottom":i.y=t.y+t.height+i.radius;break}if(this.config.enableLightningOnCollision){const i=performance.now();this.collisionLightningPositions=this.collisionLightningPositions.filter((t=>i-t.time<this.config.collisionLightningDelay));const t=i-this.lastCollisionLightningTime,n=this.collisionLightningPositions.every((i=>Math.hypot(s.x-i.x,s.y-i.y)>=this.config.collisionLightningMinDistance));t>=this.config.collisionLightningDelay&&n&&(this.createLightning(s.x,s.y,this.config.collisionLightningLifetime,this.config.collisionLightningColor,this.config.collisionLightningGlowColor,this.config.collisionLightningOpacity,this.config.collisionLightningThickness,this.config.collisionLightningIntensity,"collision"),this.lastCollisionLightningTime=i,this.collisionLightningPositions.push({x:s.x,y:s.y,time:i}))}}if(i.x-i.radius<t){if(i.velocity.x=-i.velocity.x*a,i.x=t+i.radius,this.config.enableLightningOnCollision){const n={x:t,y:i.y};this.triggerCollisionLightning(n)}}else if(i.x+i.radius>this.canvas.width-t&&(i.velocity.x=-i.velocity.x*a,i.x=this.canvas.width-t-i.radius,this.config.enableLightningOnCollision)){const n={x:this.canvas.width-t,y:i.y};this.triggerCollisionLightning(n)}if(i.y-i.radius<t){if(i.velocity.y=-i.velocity.y*a,i.y=t+i.radius,this.config.enableLightningOnCollision){const n={x:i.x,y:t};this.triggerCollisionLightning(n)}}else if(i.y+i.radius>this.canvas.height-t&&(i.velocity.y=-i.velocity.y*a,i.y=this.canvas.height-t-i.radius,this.config.enableLightningOnCollision)){const n={x:i.x,y:this.canvas.height-t};this.triggerCollisionLightning(n)}const l=Math.sqrt(i.velocity.x**2+i.velocity.y**2);if(l>.01)i.velocity.x=i.velocity.x/l*this.config.particleSpeed,i.velocity.y=i.velocity.y/l*this.config.particleSpeed;else{const t=Math.random()*Math.PI*2;i.velocity.x=Math.cos(t)*this.config.particleSpeed,i.velocity.y=Math.sin(t)*this.config.particleSpeed}}))}drawParticles(){try{this.ctx.globalCompositeOperation=this.config.particleBlendMode,this.ctx.globalAlpha=this.config.particleOpacity,this.ctx.fillStyle=this.config.particleColor,this.particles.forEach((i=>{this.ctx.beginPath(),this.ctx.arc(i.x,i.y,i.radius,0,2*Math.PI),this.ctx.fill()})),this.ctx.globalAlpha=1,this.ctx.globalCompositeOperation="source-over"}catch(i){}}connectParticles(){try{this.ctx.globalAlpha=this.config.lineOpacity,this.ctx.strokeStyle=this.config.lineColor,this.ctx.lineWidth=this.config.lineThickness;const i=this.config.maxDistance**2;for(let t=0;t<this.particles.length;t++)for(let n=t+1;n<this.particles.length;n++){const s=this.particles[t].x-this.particles[n].x,e=this.particles[t].y-this.particles[n].y;s*s+e*e<i&&(this.ctx.beginPath(),this.ctx.moveTo(this.particles[t].x,this.particles[t].y),this.ctx.lineTo(this.particles[n].x,this.particles[n].y),this.ctx.stroke())}this.ctx.globalAlpha=1}catch(i){}}findClosestParticle(i,t){let n=1/0,s=null;for(const e of this.particles){const l=e.x-i,o=e.y-t,h=l*l+o*o;h<n&&(n=h,s=e)}return s}createLightning(i=null,t=null,n=null,s=null,e=null,l=null,o=null,h=null,a="general"){if(!("collision"===a&&!1===this.config.collisionEnableSplits||"general"===a&&!1===this.config.enableSplits||"collision"===a&&this.collisionLightningPositions.length>=this.config.collisionMaxSplits||"general"===a&&this.lightning.length>=this.config.maxSplits))try{if(0===this.particles.length&&(null===i||null===t))return;let c=null!==i?i:this.particles[Math.floor(Math.random()*this.particles.length)].x,g=null!==t?t:this.particles[Math.floor(Math.random()*this.particles.length)].y;const r=[{x:c,y:g}];let f=this.config.globalLightningDirection?this.config.lightningAngle:Math.random()*Math.PI*2;const p=null!==n?n:Math.floor(Math.random()*(this.config.maxLightningSegments-this.config.minLightningSegments+1))+this.config.minLightningSegments,d="collision"===a?this.config.collisionEnableSplits:this.config.enableSplits,u="collision"===a?this.config.collisionSplitProbability:this.config.splitProbability,m="collision"===a?this.config.collisionMinSplitSegments:this.config.minSplitSegments;"collision"===a?this.config.collisionMaxSplits:this.config.maxSplits;for(let i=0;i<p;i++){const t=30*Math.random()+20;let s=c+Math.cos(f)*t,e=g+Math.sin(f)*t;if(this.config.lightningThroughParticles){const i=this.findClosestParticle(s,e);i&&(s=i.x,e=i.y)}if(r.push({x:s,y:e}),d&&Math.random()<u&&null===n){const t=Math.floor(Math.random()*(p-i-this.config.minSplitSegments))+m;this.createLightning(s,e,t,null,null,null,null,null,a)}if(this.config.globalLightningDirection||(f+=(Math.random()-.5)*Math.PI/4),c=s,g=e,c<0||c>this.canvas.width||g<0||g>this.canvas.height)break}const y=null!==n?n:Math.floor(Math.random()*(this.config.maxLightningLifetime-this.config.minLightningLifetime+1))+this.config.minLightningLifetime,x=null!==s?s:this.config.lightningColor,L=null!==e?e:this.config.lightningGlowColor,v=null!==l?l:this.config.lightningOpacity,b=null!==o?o:this.config.lightningThickness,C=null!==h?h:this.config.lightningGlow;this.lightning.push({points:r,color:x,glowColor:L,alpha:v,lifetime:y,currentLifetime:0,thickness:b,intensity:C})}catch(i){}}drawLightning(){this.ctx.globalCompositeOperation=this.config.lightningBlendMode;for(let i=this.lightning.length-1;i>=0;i--){const t=this.lightning[i];let n;if(this.ctx.save(),this.ctx.beginPath(),this.ctx.moveTo(t.points[0].x,t.points[0].y),this.config.instantLightning)n=t.points.length;else{const i=t.currentLifetime/t.lifetime;n=Math.floor(i*t.points.length)}for(let i=1;i<n;i++)this.ctx.lineTo(t.points[i].x,t.points[i].y);this.ctx.shadowColor=t.glowColor,this.ctx.shadowBlur=t.intensity,this.ctx.shadowOffsetX=0,this.ctx.shadowOffsetY=0,t.alpha=Math.max(t.alpha*(1-t.currentLifetime/t.lifetime),0),this.ctx.globalAlpha=t.alpha,this.ctx.strokeStyle=t.color,this.ctx.lineWidth=t.thickness,this.ctx.stroke(),this.ctx.restore(),t.currentLifetime++,(t.currentLifetime>=t.lifetime||t.alpha<=0)&&this.lightning.splice(i,1)}this.ctx.globalAlpha=1,this.ctx.globalCompositeOperation="source-over"}drawBackground(){this.ctx.fillStyle=this.config.backgroundColor,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}animate(i){if(!this.isRunning)return;if(requestAnimationFrame(this.animate),this.isPaused)return;this.deltaTime=Math.min(i-this.lastTime,100),this.frameCount++;const t=performance.now(),n=t-this.lastFpsUpdate;if(n>=1e3)if(this.fps=this.frameCount/n*1e3,this.frameCount=0,this.lastFpsUpdate=t,this.fps<this.config.minFPS&&this.particles.length>this.config.minParticleCount)for(let i=0;i<this.config.particleAdjustStep;i++)this.particles.length>this.config.minParticleCount&&this.particles.pop();else if(this.fps>this.config.maxFPS&&this.particles.length<this.config.maxParticleCount)for(let i=0;i<this.config.particleAdjustStep;i++)this.particles.length<this.config.particleCount&&this.createParticle();i-this.lastTime<this.fpsInterval||(this.lastTime=i,this.drawBackground(),this.config.lightningOpacity>0&&Math.random()<this.config.lightningFrequency&&this.createLightning(),this.drawLightning(),this.particles.length<this.config.particleCount&&this.createParticle(),this.updateParticles(),this.connectParticles(),this.drawParticles())}updateConfig(i){const{randomizeDirection:t,...n}=i;for(Object.assign(this.config,n),this.fpsInterval=1e3/this.config.fpsLimit,this.lightning=[];this.particles.length>this.config.particleCount;)this.particles.pop();for(;this.particles.length<this.config.particleCount;)this.createParticle();if(this.particles.length<this.config.minParticleCount)for(;this.particles.length<this.config.minParticleCount;)this.createParticle();else if(this.particles.length>this.config.maxParticleCount)for(;this.particles.length>this.config.maxParticleCount;)this.particles.pop()}pause(){this.isPaused=!0}resume(){this.isPaused&&(this.isPaused=!1,this.lastTime=performance.now(),this.config.resetOnResume&&this.particles.forEach((i=>{i.x=Math.random()*this.canvas.width,i.y=Math.random()*this.canvas.height})))}stop(){this.isRunning=!1,this.removeEventListeners(),this.particles=[],this.lightning=[],this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}handleVisibilityChange(){if(document.hidden&&this.config.pauseOnBlur)this.pause();else if(!document.hidden&&this.config.pauseOnBlur){const i=this.canvas.clientWidth,t=this.canvas.clientHeight;this.canvas.width===i&&this.canvas.height===t||this.resize(),this.lastTime=performance.now(),this.resume()}}handleFocus(){this.config.pauseOnBlur&&this.resume()}handleBlur(){this.config.pauseOnBlur&&this.pause()}handleScroll(){const i=this.canvas.getBoundingClientRect(),t=Math.max(document.documentElement.clientHeight,window.innerHeight),n=!(i.bottom<0||i.top-t>=0);n&&this.isScrollPaused?(this.resume(),this.isScrollPaused=!1):n||this.isScrollPaused||(this.pause(),this.isScrollPaused=!0)}isInsideAvoidableArea(i){return this.avoidableAreas.some((t=>i.x>t.x&&i.x<t.x+t.width&&i.y>t.y&&i.y<t.y+t.height))}updateAvoidableAreas(i){this.avoidableAreas=[];document.querySelectorAll(i).forEach((i=>{const t=i.getBoundingClientRect(),n=this.canvas.getBoundingClientRect();this.avoidableAreas.push({x:t.left-n.left,y:t.top-n.top,width:t.width,height:t.height})}))}getCollidedAvoidableArea(i,t,n){for(const t of this.avoidableAreas){if(i.x+i.radius>t.x&&i.x-i.radius<t.x+t.width&&i.y+i.radius>t.y&&i.y-i.radius<t.y+t.height){const n=Math.abs(i.x-t.x),s=Math.abs(i.x-(t.x+t.width)),e=Math.abs(i.y-t.y),l=Math.abs(i.y-(t.y+t.height)),o=Math.min(n,s,e,l);let h=null;o===n?h="left":o===s?h="right":o===e?h="top":o===l&&(h="bottom");let a={x:i.x,y:i.y};switch(h){case"left":a.x=t.x,a.y=i.y;break;case"right":a.x=t.x+t.width,a.y=i.y;break;case"top":a.x=i.x,a.y=t.y;break;case"bottom":a.x=i.x,a.y=t.y+t.height;break}return{area:t,side:h,collisionPoint:a}}}return null}triggerCollisionLightning(i){if(!this.config.enableLightningOnCollision)return;const t=performance.now();this.collisionLightningPositions=this.collisionLightningPositions.filter((i=>t-i.time<this.config.collisionLightningDelay));const n=t-this.lastCollisionLightningTime,s=this.collisionLightningPositions.every((t=>Math.hypot(i.x-t.x,i.y-t.y)>=this.config.collisionLightningMinDistance));n>=this.config.collisionLightningDelay&&s&&(this.createLightning(i.x,i.y,this.config.collisionLightningLifetime,this.config.collisionLightningColor,this.config.collisionLightningGlowColor,this.config.collisionLightningOpacity,this.config.collisionLightningThickness,this.config.collisionLightningIntensity,"collision"),this.lastCollisionLightningTime=t,this.collisionLightningPositions.push({x:i.x,y:i.y,time:t}))}}